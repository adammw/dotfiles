# ~/.bashrc: executed by bash(1) for non-login shells.

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=100000000
HISTFILESIZE=2000000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
#    xterm-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]'
    CLICOLOR=1
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w'
    CLICOLOR=0
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# define my default editor
export EDITOR='nano'
export VISUAL='atom -w'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.

if [ -f ~/.bash_aliases ]; then
    source ~/.bash_aliases
fi

# enable cd spellcheck
shopt -s cdspell

# enable autocd
if [ ${BASH_VERSINFO[0]} -ge 4 ]
then
  shopt -s autocd
fi

# Uncomment these lines to enable bashrc tracing
# PS4='+ $(/usr/local/opt/coreutils/libexec/gnubin/date "+%s.%N")\011 '
# exec 3>&2 2>/tmp/bashstart.$$.log
# set -x

# if running with homebrew
if [[ -n "$(which brew)" ]]; then
    HOMEBREW_PREFIX="$(brew --prefix)"

    # use unprefixed GNU versions of coreutils
    if [[ -d "$HOMEBREW_PRFIX/opt/coreutils/libexec/" ]]; then
        PATH="$HOMEBREW_PRFIX/opt/coreutils/libexec/gnubin:$PATH"
        MANPATH="$HOMEBREW_PRFIX/opt/coreutils/libexec/gnuman:$MANPATH"
    fi

    # enable nvm
    [[ -f "$HOMEBREW_PRFIX/opt/nvm/nvm.sh" ]] && source "$HOMEBREW_PRFIX/opt/nvm/nvm.sh"

    # ruby gems from homebrew
    if [[ -d "$HOMEBREW_PRFIX/opt/ruby/bin/" ]]; then
        PATH=$PATH:$HOMEBREW_PRFIX/opt/ruby/bin/
    fi
else
    HOMEBREW_PREFIX="/"
fi

# enable color support of ls and also add handy aliases
if [[ -x "$(which dircolors)" ]]; then
    DIRCOLORS_BIN="$(which dircolors)"
    test -r ~/.dircolors && eval "$($DIRCOLORS_BIN -b ~/.dircolors)" || eval "$($DIRCOLORS_BIN -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    #alias vdir='gvdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [[ -f "$HOMEBREW_PREFIX/etc/bash_completion" ]] && ! shopt -oq posix; then
    #unalias printf # we need macosx printf, not GNU printf
    source "$HOMEBREW_PREFIX/etc/bash_completion"
fi

if [[ -d "$HOME/.bash_completion.d" ]]; then
    for f in "$HOME/.bash_completion.d/*"; do source $f; done
fi

# enable bash-git-prompt
# https://github.com/magicmonty/bash-git-prompt
if [[ -f "$HOMEBREW_PREFIX/opt/bash-git-prompt/share/gitprompt.sh" ]]; then
  __GIT_PROMPT_DIR="$HOMEBREW_PREFIX/opt/bash-git-prompt/share"
  GIT_PROMPT_IGNORE_SUBMODULES=1
  GIT_PROMPT_SHOW_UNTRACKED_FILES=normal
  GIT_PROMPT_THEME=Single_line_Minimalist
  source "$HOMEBREW_PREFIX/opt/bash-git-prompt/share/gitprompt.sh"
fi

# enable git prompt if bash-git-prompt not enabled
# https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh
if [[ ! -f "$HOMEBREW_PREFIX/opt/bash-git-prompt/share/gitprompt.sh" ]] && \
   [[ -f "$HOMEBREW_PREFIX/etc/bash_completion.d/git-prompt.sh" || \
      -f "$HOMEBREW_PREFIX/etc/bash_completion.d/git-prompt" ]]; then
    GIT_PS1_SHOWDIRTYSTATE=true
    GIT_PS1_UNTRACKEDFILES=true
    if [ "$CLICOLOR" = 1 ]; then
        GIT_PS1_SHOWCOLORHINTS=true
    fi
    PROMPT_COMMAND="__git_ps1 \"$PS1\" \"\\\\\$ \""
else
    PS1="$PS1\$ "
fi

# enable autojump
[[ -s $HOMEBREW_PREFIX/etc/autojump.sh ]] && source $HOMEBREW_PREFIX/etc/autojump.sh
[[ -s /usr/share/autojump/autojump.sh ]] && source /usr/share/autojump/autojump.sh

# auto-bundle exec aliases
[ -f ~/.bundler-exec.sh ] && source ~/.bundler-exec.sh

# rbenv
if [[ -n $(which rbenv) ]]; then
  eval "$(rbenv init -)"
fi

# nodenv
if [[ -n $(which nodenv) ]]; then
  eval "$(nodenv init -)"
fi

# gopath
export GOPATH=$HOME/Code/go/
export PATH=$PATH:$GOPATH/bin

if [ -d "$HOME/.bashrc.d" ]; then
  for f in "$HOME/.bashrc.d/*"; do
    source $f
  done
fi

# local customisations
if [ -f "$HOME/.bashrc.local" ]; then
    . "$HOME/.bashrc.local"
fi

# Uncomment these lines to enable bashrc tracing
# set +x
# exec 2>&3 3>&-
